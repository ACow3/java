package com.codingdojo.authentication.controllers;

import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.codingdojo.authentication.models.User;
import com.codingdojo.authentication.services.UserService;


@Controller
public class Users {

	private final UserService userService;

	public Users(UserService userService) {
		this.userService = userService;
	}

	// render registration page
	@RequestMapping("/registration")
	public String registerForm(@ModelAttribute("user") User user) {
		return "views/registrationPage.jsp";
	}

	// render login page
	@RequestMapping("/login")
	public String login() {
		return "views/loginPage.jsp";
	}

	@RequestMapping(value = "/registration", method = RequestMethod.POST)
	public String registerUser(@Valid @ModelAttribute("user") User user, BindingResult result, HttpSession session) {
		return null;
		// if result has errors, return the registration page (don't worry about
		// validations just now)
		// else, save the user in the database, save the user id in session, and
		// redirect them to the /home route
	}

	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public String loginUser(@RequestParam("email") String email, @RequestParam("password") String password, Model model,
			HttpSession session) {
				return password;
		// if the user is authenticated, save their user id in session
		// else, add error messages and return the login page
	}

	@RequestMapping("/home")
	public String home(HttpSession session, Model model) {
		return null;
		// get user from session, save them in the model and return the home page
	}

	@RequestMapping("/logout")
	public String logout(HttpSession session) {
		return null;
		// invalidate session
		// redirect to login page
	}

	public UserService getUserService() {
		return userService;
	}
}